"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldInclusionMode = exports.OpenTelemetryLogsOutputPlugin = void 0;
const api_logs_1 = require("@opentelemetry/api-logs");
const record_1 = require("../logger/record");
const level_1 = require("../logger/level");
class OpenTelemetryLogsOutputPlugin {
    constructor(loggerProvider) {
        if (loggerProvider) {
            this.logger = loggerProvider.getLogger('default');
        }
        else {
            this.logger = api_logs_1.logs.getLoggerProvider().getLogger("default");
        }
        this.includeFieldsAsAttributes = FieldInclusionMode.CustomFieldsOnly;
    }
    setIncludeFieldsAsAttributes(includeFieldsAsAttributes) {
        this.includeFieldsAsAttributes = includeFieldsAsAttributes;
    }
    writeRecord(record) {
        if (record.metadata.type == record_1.RecordType.Request) {
            return; // ignore request logs
        }
        let attributes = {};
        this.populateExceptionAttributes(record, attributes);
        this.populateAdditionalAttributes(record, attributes);
        let severityNumber = this.mapLevelToSeverityNumber(record.metadata.level);
        this.logger.emit({
            severityNumber: severityNumber,
            severityText: api_logs_1.SeverityNumber[severityNumber],
            body: record.metadata.message,
            attributes: attributes
        });
    }
    mapLevelToSeverityNumber(level) {
        switch (level) {
            case level_1.Level.Error:
                return api_logs_1.SeverityNumber.ERROR;
            case level_1.Level.Warn:
                return api_logs_1.SeverityNumber.WARN;
            case level_1.Level.Info:
                return api_logs_1.SeverityNumber.INFO;
            case level_1.Level.Verbose:
            case level_1.Level.Debug:
                return api_logs_1.SeverityNumber.DEBUG;
            case level_1.Level.Silly:
                return api_logs_1.SeverityNumber.TRACE;
        }
        return api_logs_1.SeverityNumber.UNSPECIFIED;
    }
    populateExceptionAttributes(record, attributes) {
        if (record.metadata.errorName) {
            attributes["exception.type"] = record.metadata.errorName;
        }
        if (record.metadata.errorMessage) {
            attributes["exception.message"] = record.metadata.errorMessage;
        }
        if (record.metadata.rawStacktrace) {
            attributes["exception.stacktrace"] = record.metadata.rawStacktrace;
        }
    }
    populateAdditionalAttributes(record, attributes) {
        switch (this.includeFieldsAsAttributes) {
            case FieldInclusionMode.AllFields:
                for (let key in record.payload) {
                    attributes[key] = record.payload[key];
                }
                break;
            case FieldInclusionMode.CustomFieldsOnly:
                for (let key of record.metadata.customFieldNames) {
                    if (record.payload[key] !== undefined) {
                        attributes[key] = record.payload[key];
                    }
                }
                break;
            case FieldInclusionMode.None:
            default:
                return;
        }
    }
}
exports.OpenTelemetryLogsOutputPlugin = OpenTelemetryLogsOutputPlugin;
var FieldInclusionMode;
(function (FieldInclusionMode) {
    FieldInclusionMode["AllFields"] = "all";
    FieldInclusionMode["CustomFieldsOnly"] = "custom-fields";
    FieldInclusionMode["None"] = "none";
})(FieldInclusionMode || (exports.FieldInclusionMode = FieldInclusionMode = {}));
//# sourceMappingURL=otelOutput.js.map